# -*- coding: utf-8 -*-
"""Week4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/swathiakila45/Winter_Internship_PrepInsta/blob/main/Week%204/Week4.ipynb

importing files
"""

import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

population= pd.read_csv("/content/country_population.csv")
fertility_rate=pd.read_csv("/content/fertility_rate.csv")
life_expectency=pd.read_csv("/content/life_expectancy.csv")
metadata=pd.read_csv("/content/Metadata_Country.csv")

years=[str(i) for i in range(1960,2017)]

"""Cleaning Population document data

1.  Removing unnessacry columns => Indicator Code, Indicator Name
2. Modifying column name for Country code and Country Name
3. Removing Countries where there is no data in entire row of years
4. Melting data by converting year from column to rows
5. Removing rows with empty data


"""

population_copy=population.copy()

population_copy.drop(['Indicator Code','Indicator Name'],axis=1,inplace=True)

population_copy.rename(columns={'Country Name':'country_name','Country Code':'country_code'},inplace=True)

population_copy.dropna(axis=0,inplace=True)

population_melt = pd.melt(population_copy,
                          id_vars='country_code',
                          value_vars=years,
                          var_name='year',
                          value_name='population'
                          )
# population_melt.head(5)
population_melt['year']=population_melt['year'].astype(int)

population_melt.info()

"""Implementing the above data Cleaning to other frames of fertility and life expectency

"""

fertility_rate_copy=fertility_rate.copy()

fertility_rate_copy.drop(['Indicator Code','Indicator Name'],axis=1,inplace=True)

fertility_rate_copy.rename(columns={'Country Name':'country_name','Country Code':'country_code'},inplace=True)

fertility_rate_copy.dropna(axis=0,inplace=True)

print(fertility_rate_copy.shape)

fertility_rate_melt = pd.melt(fertility_rate_copy,
                          id_vars='country_code',
                          value_vars=years,
                          var_name='year',
                          value_name='fertility_rate'
                          )
# population_melt.head(5)
fertility_rate_melt['year']=fertility_rate_melt['year'].astype(int)

print(fertility_rate_melt.head(5))
# fertility_rate_melt.info()

life_expectency_copy=life_expectency.copy()


life_expectency_copy.drop(['Indicator Code','Indicator Name'],axis=1,inplace=True)

life_expectency_copy.rename(columns={'Country Name':'country_name','Country Code':'country_code'},inplace=True)

life_expectency_copy.dropna(axis=0,inplace=True)

print(life_expectency_copy.shape)

life_expectency_melt = pd.melt(life_expectency_copy,
                          id_vars='country_code',
                          value_vars=years,
                          var_name='year',
                          value_name='life_expectency'
                          )
print(life_expectency_melt.head(5))
life_expectency_melt['year']=life_expectency_melt['year'].astype(int)

# life_expectency_melt.info()

"""Modifying Meta data frame so that it has only country code and region

"""

metadata_final=metadata[['Country Code','Region']]

metadata_final.rename(columns={'Country Code':'country_code','Region':'region'},inplace=True)

metadata_final.head(5)

"""Merging Data sets


"""

df_merged=pd.merge(metadata_final,population_melt,how="left",on='country_code')

df_merged=df_merged.merge(fertility_rate_melt,how='left',on=['country_code','year'])
df_merged=df_merged.merge(life_expectency_melt,how='left',on=['country_code','year'])
df_merged.head(5)

"""Visualization using seaborn

"""

df_merged=df_merged.dropna(subset='year')

df_merged=df_merged.dropna(subset='life_expectency')

df_merged['year']=df_merged['year'].astype(int)

df_merged.info()

"""Plotting for Life Expectancy against country code for years from 1960 to 2016

To fix the range in y axis
"""

print(df_merged['life_expectency'].min())
print(df_merged['life_expectency'].max())

import plotly.express as px

life_expectency_graph=px.scatter(df_merged,x="country_code",y="life_expectency",animation_frame="year",animation_group="country_code",color="country_code",hover_name="country_code",log_x=False,size_max=1000,range_y=[15,85])

life_expectency_graph.show()

"""Plotting for Population against country code for years from 1960 to 2016 using plotly"""

import plotly.express as px

population_graph=px.scatter(df_merged,x="country_code",y="population",animation_frame="year",animation_group="country_code",color="country_code",hover_name="country_code",log_x=False,size_max=100)

population_graph.show()

"""Fertility rate min and max to set y axis range"""

print(df_merged['fertility_rate'].min())
print(df_merged['fertility_rate'].max())

import plotly.express as px

fertility_rate_graph=px.scatter(df_merged,x="country_code",y="fertility_rate",animation_frame="year",animation_group="country_code",color="country_code",log_x=0,hover_name="country_code",size_max=100,range_y=[0, 9])

fertility_rate_graph.show()